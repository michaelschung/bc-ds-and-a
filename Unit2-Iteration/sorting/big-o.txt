# Mr. Chung
# 2/23: Big O

Big O: A way to measure the worst-case scenario runtime for an algorithm.

Assume input has length n.

"Big O" runtime of the algorithm describes the number of computations required to complete the algorithm.

Bubble sort:
- Best case: O(n)
  - If everything is already in order, we only have to make one pass, which takes ~n comparisons
- Worst case: O(n^2)
  - If everything is reversed, we have to make ~n passes, each time making ~n comparisons

Selection sort:
- Best case: O(n^2)
- Worst case: O(n^2)

============================

n = 100
m = 50

# O(n)
for i in range(n):
  print(i)

# O(n^2)
for i in range(n):
  for j in range(n):
    print(i)

# O(nm)
for i in range(n):
  for j in range(m):
    print(i)

# O(n^2)
for i in range(n):
  for j in range(n/2):
    print(i)

# O(1) - constant time
for i in range(1000000000):
  print(i)

# O(1) - constant time
for i in range(1):
  print(i)
